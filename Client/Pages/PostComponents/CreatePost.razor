@page "/post/create"
@inject IPostRepository postRepository
@inject ICategoryRepository categoryRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="container shadow mt-4 p-5">
    @if (ShowMessage)
    {
        <p class="text-center alert alert-info">@Message</p>
    }
    <EditForm Model="post" OnValidSubmit="CreateNewPost">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Category : </label>
            <select @bind="post.CategoryId" class="form-control">
                @if (categories != null && categories.Count > 0)
                {
                    <option value="0">Select Category</option>
                    foreach (Category item in categories)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
                else
                {
                    <option value="0">Category Not Selected</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Title :</label>
            <input type="text" class="form-control" @bind-value="post.Title" />
        </div>
        <div class="form-group">
            <label>Image URL :</label>
            <input type="text" class="form-control" @bind-value="post.Image" />
        </div>
        <div class="form-group">
            <label>Description :</label>
            @*<input type="text" class="form-control" @bind-value="post.Title" />*@
            <textarea cols="30" rows="3" @bind="post.Description" class="form-control"></textarea>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-success mt-3">
                Submit
            </button>
        </div>
    </EditForm>
</div>

@code {
    Post post;
    List<Category> categories;
    public string Message = null;
    public bool ShowMessage = false;
    private Task<AuthenticationState> authState;
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        post = new Post();

        post.UserId = authState.User
            .Claims.Where(p => p.Type == "CurrentUserId")
            .Select(p => p.Value).FirstOrDefault();

        var result = await categoryRepository.GetCategories();
        if (result.Status)
        {
            if (result.Response != null && result.Response.Count > 0)
            {
                categories = result.Response;
            }
            else
            {
                categories = new List<Category>();
            }
        }
        else
        {
            categories = new List<Category>();
        }
    }

    private async Task CreateNewPost()
    {
        if (post.CategoryId  == 0)
        {
            ShowMessage = true;
            Message = "Category Field is required !";
        }else
        {
            Console.WriteLine(post.UserId);
            var result = await postRepository.CreatePost(post);
            ShowMessage = true;
            if (result.Status)
            {
                if (result.Response != null)
                {
                    Message = "Your post has been submitted successfuly 😎 ";
                }
                else
                {
                    Message = "Failed to submit the post 😪";
                }
            }
            else
            {
                Message = "Something went wrong 🥵 ";
            }
        }

    }
}